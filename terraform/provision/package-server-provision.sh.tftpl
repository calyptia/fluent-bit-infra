#!/bin/env bash
exec &> >(tee -a "/tmp/user-data.sh.log")
set -x

echo "> Updating and installing dependencies"
# Add dependencies and allow for other users of apt-get
# https://blog.sinjakli.co.uk/2021/10/25/waiting-for-apt-locks-without-the-hacky-bash-scripts/
apt-get -o DPkg::Lock::Timeout=60 update
apt-get -o DPkg::Lock::Timeout=-1 install -y docker.io docker-compose nginx awscli git wget

# https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal
snap install core
snap refresh core
snap install --classic certbot
ln -sf /snap/bin/certbot /usr/bin/certbot
snap set certbot trust-plugin-with-root=ok
snap install certbot-dns-cloudflare

# Prevent pull rate limiting
docker login -u '${dockerhub-username}' -p '${dockerhub-token}' docker.io

echo "> Configuring Nginx"
mkdir -p /var/www/apt.fluentbit.io /var/www/releases.fluentbit.io

rm -f /etc/nginx/sites-enabled/default

# Set up the package serving
cat > /etc/nginx/sites-available/apt.fluentbit.io <<'EOF'
server {
	root /var/www/apt.fluentbit.io;
	index index.html index.htm index.nginx-debian.html;

	server_name apt-next.fluentbit.io packages-next.fluentbit.io www.apt-next.fluentbit.io www.packages-next.fluentbit.io;
	access_log /var/log/nginx/apt.fluentbit.io.access.log;
	error_log  /var/log/nginx/apt.fluentbit.io.error.log;

	location / {
		try_files $uri $uri/ =404;
		autoindex on;
	}

	listen 80;
	listen [::]:80;
}
EOF
ln -sf /etc/nginx/sites-available/apt.fluentbit.io /etc/nginx/sites-enabled/apt.fluentbit.io
cp -f /etc/nginx/sites-available/apt.fluentbit.io /etc/nginx/sites-available/apt-next.fluentbit.io

# Set up the releases handling - Windows + Source/JSON
cat > /etc/nginx/sites-available/releases.fluentbit.io <<'EOF'
server {
	root /var/www/releases.fluentbit.io;
	index index.html index.htm index.nginx-debian.html;

	server_name releases-next.fluentbit.io www.releases-next.fluentbit.io;
	access_log /var/log/nginx/releases.fluentbit.io.access.log;
	error_log  /var/log/nginx/releases.fluentbit.io.error.log;

	location / {
		try_files $uri $uri/ =404;
        autoindex on;
	}

	listen 80;
	listen [::]:80;
}
EOF
ln -sf /etc/nginx/sites-available/releases.fluentbit.io /etc/nginx/sites-enabled/releases.fluentbit.io
cp -f /etc/nginx/sites-available/releases.fluentbit.io /etc/nginx/sites-available/releases-next.fluentbit.io

systemctl restart nginx

# Set up cron job
echo "> Setting up S3 sync job"
cat > /etc/systemd/system/packages-sync.service <<EOF
[Unit]
Description=Syncs all release packages from the AWS bucket to this server.
Wants=packages-sync.timer

[Service]
Type=oneshot
ExecStartPre=mkdir -p /var/www/apt.fluentbit.io
ExecStart=aws s3 sync s3://${packages-bucket} /var/www/apt.fluentbit.io --no-sign-request

[Install]
WantedBy=multi-user.target
EOF

cat > /etc/systemd/system/packages-sync.timer <<EOF
[Unit]
Description=Syncs all release packages from the AWS bucket to this server.
Requires=packages-sync.service

[Timer]
Unit=packages-sync.service
OnCalendar=*-*-* *:00:00

[Install]
WantedBy=timers.target
EOF

echo "> Adding releases sync from existing server"
mkdir -p /var/www/releases.fluentbit.io
cat > /etc/systemd/system/releases-sync.service <<EOF
[Unit]
Description=Syncs all releases information from the old server.
Wants=releases-sync.timer

[Service]
Type=oneshot
ExecStartPre=mkdir -p /var/www/releases.fluentbit.io
ExecStart=wget --recursive --level=inf --no-verbose --no-clobber -P /var/www/ http://releases.fluentbit.io

[Install]
WantedBy=multi-user.target
EOF

cat > /etc/systemd/system/releases-sync.timer <<EOF
[Unit]
Description=Syncs all releases information from the old server.
Requires=releases-sync.service

[Timer]
Unit=releases-sync.service
OnCalendar=*-*-* *:30:00

[Install]
WantedBy=timers.target
EOF

systemctl daemon-reload
systemctl enable --now packages-sync.timer
# TODO: disable release sync once this server becomes the official one (IP == releases.fluentbit.io)
systemctl enable --now releases-sync.timer

echo "> Deploying metrics exporter"
mkdir -p /opt/fluent-bit-stats
git clone https://github.com/niedbalski/fluent-bit-stats.git /opt/fluent-bit-stats
sed -i 's|infinityworks/docker-hub-exporter:latest|ghcr.io/artemkaxboy/docker-hub-exporter:legacy|g' /opt/fluent-bit-stats/docker-compose.yml
# Provided by Terraform variables
# shellcheck disable=SC2016
sed -i 's/__GRAFANACLOUD_USERNAME__/${grafana-cloud-prometheus-username}/g' /opt/fluent-bit-stats/config/prometheus.yml
# shellcheck disable=SC2016
sed -i 's/__GRAFANACLOUD_PASSWORD__/${grafana-cloud-prometheus-apikey}/g' /opt/fluent-bit-stats/config/prometheus.yml

( cd /opt/fluent-bit-stats || exit; docker-compose pull && docker-compose up -d )

echo "> Setting up Certbot"
mkdir -p /root/.secrets/certbot/
# Provided by Terraform variables
# shellcheck disable=SC2016
echo 'dns_cloudflare_api_token = ${cloudflare-token}' > /root/.secrets/certbot/cloudflare.ini
chmod 600 /root/.secrets/certbot/cloudflare.ini

# First of all use Cloudflare to automatically respond to the challenges and get the certificates.
certbot certonly -n --agree-tos --email 'ci@calyptia.com' \
	--dns-cloudflare \
	--dns-cloudflare-credentials /root/.secrets/certbot/cloudflare.ini \
	--dns-cloudflare-propagation-seconds 60 \
	-d apt-next.fluentbit.io \
	-d www.apt-next.fluentbit.io \
	-d packages-next.fluentbit.io \
	-d www.packages-next.fluentbit.io \
	-d releases-next.fluentbit.io \
	-d www.releases-next.fluentbit.io 

# Now configure Nginx to use the certificates we got above.
certbot --nginx -n --agree-tos --email 'ci@calyptia.com' \
	-d apt-next.fluentbit.io \
	-d www.apt-next.fluentbit.io \
	-d packages-next.fluentbit.io \
	-d www.packages-next.fluentbit.io \
	-d releases-next.fluentbit.io \
	-d www.releases-next.fluentbit.io 

echo "> Reloading Nginx configuration"
nginx -T && nginx -s reload

echo "> Ensure firewall is allowing traffic"
if command -v ufw > /dev/null 2>&1; then
    ufw allow 'Nginx Full'
    ufw delete allow 'Nginx HTTP'
    ufw status
fi

echo "> Setting up switchover script"
mkdir -p /usr/local/bin
cat > /usr/local/bin/switchover-offical.sh << 'EOF'
#!/bin/bash
set -eux

# Must run as root
[ "$(id -u)" -eq 0 ] && echo "Run as root" && exit 1

# Disable sync from release server as it becomes this one!
systemctl daemon-reload
systemctl disable --now releases-sync.timer

# Update to use official domains
sed 's/apt-next/apt/g' /etc/nginx/sites-available/apt-next.fluentbit.io > /etc/nginx/sites-available/apt.fluentbit.io
sed -i 's/packages-next/packages/g' /etc/nginx/sites-available/apt.fluentbit.io
sed 's/releases-next/releases/g' /etc/nginx/sites-available/releases-next.fluentbit.io > /etc/nginx/sites-available/releases.fluentbit.io
nginx -t
systemctl restart nginx

# Remove the old certs
certbot delete --cert-name apt-next.fluentbit.io
certbot delete --cert-name www.apt-next.fluentbit.io
certbot delete --cert-name packages-next.fluentbit.io
certbot delete --cert-name www.packages-next.fluentbit.io
certbot delete --cert-name releases-next.fluentbit.io
certbot delete --cert-name www.releases-next.fluentbit.io

# Update to request new certs and install them
certbot certonly -n --agree-tos --email 'ci@calyptia.com' \
	--dns-cloudflare \
	--dns-cloudflare-credentials /root/.secrets/certbot/cloudflare.ini \
	--dns-cloudflare-propagation-seconds 60 \
	-d apt.fluentbit.io \
	-d www.apt.fluentbit.io \
	-d packages.fluentbit.io \
	-d www.packages.fluentbit.io \
	-d releases.fluentbit.io \
	-d www.releases.fluentbit.io 

certbot --nginx -n --agree-tos --email 'ci@calyptia.com' \
	-d apt.fluentbit.io \
	-d www.apt.fluentbit.io \
	-d packages.fluentbit.io \
	-d www.packages.fluentbit.io \
	-d releases.fluentbit.io \
	-d www.releases.fluentbit.io

nginx -T && nginx -s reload
certbot certificates

rm -f /root/.secrets/certbot/cloudflare.ini

EOF
chmod 700 /usr/local/bin/switchover-offical.sh

echo "Completed provisioning successfully"
